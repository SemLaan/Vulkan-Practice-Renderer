#pragma once
#include "math_types.h"

/// @brief Generates a pseudo-random int based on a previous int or seed.
/// @param input A seed or the previous int generated by this function.
/// @return A pseudo-random int.
static inline u32 PCG_Hash(u32 input)
{
    u32 state = input * 747796405u + 2891336453u;
    u32 word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

/// @brief Generates a random float between 0 and 1. Updates the seed.
/// @param seed Pointer to a seed.
/// @return Float between 0 and 1.
static inline f32 RandomFloat(u32* seed)
{
    *seed = PCG_Hash(*seed);
    return (f32)*seed / (f32)UINT32_MAX;
}

/// @brief Generates a random point on the edge of the unit disc. Updates the seed.
/// @param seed Pointer to a seed.
/// @return vec2 with a position on the edge of the unit disc.
vec2 RandomPointOnUnitDisc(u32* seed);

/// @brief Generates a random point in the unit disc. Updates the seed.
/// @param seed Pointer to a seed.
/// @return vec2 with a position in the unit disc.
vec2 RandomPointInUnitDisc(u32* seed);

/// @brief Generates a random point on the unit sphere. Updates the seed.
/// @param seed Pointer to a seed.
/// @return vec3 with a position on the unit sphere.
vec3 RandomPointOnUnitSphere(u32* seed);

/// @brief Generates a random point in the unit sphere. Updates the seed.
/// @param seed Pointer to a seed.
/// @return vec3 with a position in the unit sphere.
vec3 RandomPointInUnitSphere(u32* seed);

